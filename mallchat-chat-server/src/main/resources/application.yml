# 日志级别配置
logging:
  level:
    org.springframework.web: info   # 设置 Spring Web 相关日志级别为 info
    com.github.binarywang.demo.wx.mp: debug   # 设置 com.github.binarywang.demo.wx.mp 包下的日志级别为 debug
    me.chanjar.weixin: debug        # 设置 me.chanjar.weixin 包下的日志级别为 debug

# MyBatis-Plus 配置
mybatis-plus:
  mapper-locations: classpath:mapper/**/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true

# Spring 配置
spring:
  profiles:
    #运行的环境
    active: test
  application:
    name: mallchat
  datasource:
    url: jdbc:mysql://${mallchat.mysql.ip}:${mallchat.mysql.port}/${mallchat.mysql.db}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: ${mallchat.mysql.username}
    password: ${mallchat.mysql.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
#    慢sql查询，使用p6spy提供的驱动类，然后配置spy.properties
#    url: jdbc:p6spy:mysql://${mallchat.mysql.ip}:${mallchat.mysql.port}/${mallchat.mysql.db}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
#    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    hikari: # HikariCP 数据库连接池配置
      minimum-idle: 3         # 最小空闲连接数，默认值为 10
      maximum-pool-size: 10   # 最大连接池大小，默认值为 10
      max-lifetime: 30000     # 连接的最大生命周期（毫秒），默认值为300000（5分钟）,不能小于30秒，否则默认回到1800秒
      connection-test-query: SELECT 1   # 用于测试连接有效性的 SQL 查询语句，默认为"SELECT 1"

  # redis 配置
  redis:
    # Redis服务器地址
    host: ${mallchat.redis.host}
    # Redis服务器端口号
    port: ${mallchat.redis.port}
    # 使用的数据库索引，默认是0
    database: 0
    # 连接超时时间
    timeout: 1800000
    # 设置密码
    password: ${mallchat.redis.password}

  # jackson配置
  jackson:
    serialization:
      write-dates-as-timestamps: true

  # mvc配置
  # 如果运行报错。Failed to start bean ‘documentationPluginsBootstrapper
  # 是因为springboot2.6.x后会有兼容问题，Springboot2.6以后将SpringMVC
  # 的默认路径匹配策略从AntPathMatcher 更改为PathPatternParser，导致出错。
  # 所以要么降springboot的版本，要么yml文件加上一个配置。
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
# 微信相关配置
wx:
  mp:
    #    callback:
    callback: ${mallchat.wx.callback}
    configs:
      - appId: ${mallchat.wx.appId} # 第一个公众号的appid
        secret: ${mallchat.wx.secret} # 公众号的appsecret
        token: ${mallchat.wx.token} # 接口配置里的Token值
        aesKey: ${mallchat.wx.aesKey} # 接口配置里的EncodingAESKey值
# jwt
jwt:
  secret: ${mallchat.jwt.secret}
# rocketmq
rocketmq:
  name-server: ${rocketmq.name-server}
  # 默认的消息组
  producer:
    group: chatGroup
    send-message-timeout: 3000 # 发送消息超时时间，单位：毫秒。默认为 3000 。
    compress-message-body-threshold: 4096 # 消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B
    max-message-size: 4194304 # 消息体的最大允许大小。。默认为 4 * 1024 * 1024B
    retry-times-when-send-failed: 2 # 同步发送消息时，失败重试次数。默认为 2 次。
    retry-times-when-send-async-failed: 2 # 异步发送消息时，失败重试次数。默认为 2 次。
    retry-next-server: false # 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false
    access-key: ${rocketmq.access-key} # Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
    secret-key: ${rocketmq.secret-key} # Secret Key
    enable-msg-trace: true # 是否开启消息轨迹功能。默认为 true 开启。可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/msg_trace/user_guide.md 文档
    customized-trace-topic: RMQ_SYS_TRACE_TOPIC # 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC 。
  # Consumer 配置项
  consumer:
    access-key: ${rocketmq.access-key} # Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
    secret-key: ${rocketmq.secret-key} # Secret Key
    listeners: # 配置某个消费分组，是否监听指定 Topic 。结构为 Map<消费者分组, <Topic, Boolean>> 。默认情况下，不配置表示监听。
      erbadagang-consumer-group:
        topic1: false # 关闭 test-consumer-group 对 topic1 的监听消费
