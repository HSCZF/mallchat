
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    # 尽管下面做了频控，但是rate=10r/s也很难受，超过限制直接拉黑
    # 在conf目录下需要创建黑名单文件ip.black，这是静态配置，动态配置这里不弄
    include ip.black;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # 不限制的ip，方便自己压测使用，有时候nginx不生效，先停止后启动
    geo $limit {
        default 1;
        127.0.0.1 0;           # 本机地址
        12.13.14.15 0;         # 内网地址，假设是12.13.14.15，实际修改成自己的IP
    }
    # 通过geo将IP映射成值，然后再通过map将值映射成变量或常量
    # 恰好limit_req_zone中如果key为''表示不对其进行频率限制，所以只需要将白名单用户的key设置为''。
    # /usr/local/nginx/logs，在这下面的error.log有日志，可以查看被拦截的请求和是否被攻击了
    map $limit $limit_key {
        0 "";
        1 $binary_remote_addr;
    }

    # 频控全局位置(还需要限制的server内添加limit_req)，默认单位为秒，每秒最多处理 10 个请求
    limit_req_zone $limit_key zone=one:2m rate=10r/s;
    # limit_req_zone $binary_remote_addr zone=one:2m rate=10r/s;
    server {
        listen       80;
        #server_name  localhost;
        #server_name 服务器域名; 域名需要备案，这里直接使用花生壳内网穿透，比如 http://xxxxxxx.zicp.fun
        server_name xxxxxxx.zicp.fun;
        # 频控生效位置
        limit_req zone=one burst=10 nodelay;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        # 我的java部署目前就只有2个端口使用，只写了2个了
        # 写完nginx，云服务的8080和8090端口可以删除掉，使用80端口进行转发即可
        # 拦截“/”所有路径，转发到后端服务器端口8080
        location / {
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # 解决跨域问题
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Headers' '*';
            add_header 'Access-Control-Allow-Methods' '*';
            # OPTIONS 直接返回204
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        # 拦截“/websocket”所有路径，转发到后端服务器端口8090
        location = /websocket {
            proxy_pass http://127.0.0.1:8090/;
            proxy_set_header Host $host;
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 600s;
        }
        # location命中后
        # 微信公众号的用户授权需要我们将一个文件放在项目路径下标识身份
        # 如果是root，会把请求url的 ip/域名+port替换为root指定的目录，访问资源
        # 如果是alias，会把请求url的ip/域名+port+匹配到的路径替换为alias指定的目录，访问资源
        # 静态文件配置
        location = /MP_verify_GTPosqCvKIDnld6z.txt {
              alias /usr/local/nginx/html/MP_verify_GTPosqCvKIDnld6z.txt;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
